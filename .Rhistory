colnames(submissionFile)<-c("Id","WnvPresent")
options("scipen"=100, "digits"=8)
write.csv(submissionFile,submissionDir,row.names=FALSE,quote=FALSE)
getDeepModel <- function(train){
train.hex <- as.h2o(localH2O,train)
predictors <- 1:(ncol(train.hex)-1)
response <- ncol(train.hex)
model <- h2o.deeplearning(x=predictors,
y=response,
data=train.hex,
classification=T,
activation="RectifierWithDropout",
hidden=c(64,32,16),
hidden_dropout_ratio=c(0.5,0.5,0.5),
input_dropout_ratio=0.05,
epochs=50,
l1=1e-5,
l2=1e-5,
rho=0.99,
epsilon=1e-8,
train_samples_per_iteration=2000,
max_w2=10,
seed=1)
model;
}
model<-getDeepModel(cbind(x1AsMatrix,y1))
h2oPrediction<-as.data.frame(h2o.predict(model1,as.h2o(localH2O,cbind(x2AsMatrix))))
print(paste("h2o auc:",auc(y2,h2oPrediction[,3])));
h2oPrediction<-as.data.frame(h2o.predict(model,as.h2o(localH2O,cbind(x2AsMatrix))))
print(paste("h2o auc:",auc(y2,h2oPrediction[,3])));
getDeepModel <- function(train){
train.hex <- as.h2o(localH2O,train)
predictors <- 1:(ncol(train.hex)-1)
response <- ncol(train.hex)
model <- h2o.deeplearning(x=predictors,
y=response,
data=train.hex,
classification=T,
activation="RectifierWithDropout",
hidden=c(16,8,4),
hidden_dropout_ratio=c(0.5,0.5,0.5),
input_dropout_ratio=0.05,
epochs=50,
l1=1e-5,
l2=1e-5,
rho=0.99,
epsilon=1e-8,
train_samples_per_iteration=2000,
max_w2=10,
seed=1)
model;
}
model<-getDeepModel(cbind(x1AsMatrix,y1))
h2oPrediction<-as.data.frame(h2o.predict(model,as.h2o(localH2O,cbind(x2AsMatrix))))
print(paste("h2o auc:",auc(y2,h2oPrediction[,3])));
getDeepModel <- function(train){
train.hex <- as.h2o(localH2O,train)
predictors <- 1:(ncol(train.hex)-1)
response <- ncol(train.hex)
model <- h2o.deeplearning(x=predictors,
y=response,
data=train.hex,
classification=T,
activation="RectifierWithDropout",
hidden=c(32,16,8),
hidden_dropout_ratio=c(0.5,0.5,0.5),
input_dropout_ratio=0.05,
epochs=50,
l1=1e-5,
l2=1e-5,
rho=0.99,
epsilon=1e-8,
train_samples_per_iteration=2000,
max_w2=10,
seed=1)
model;
}
model<-getDeepModel(cbind(x1AsMatrix,y1))
h2oPrediction<-as.data.frame(h2o.predict(model,as.h2o(localH2O,cbind(x2AsMatrix))))
print(paste("h2o auc:",auc(y2,h2oPrediction[,3])));
model<-getDeepModel(cbind(xAsMatrix,y))
h2oPrediction<-as.data.frame(h2o.predict(model,as.h2o(localH2O,cbind(testAsMatrix))))
library(Metrics)
library(xgboost)
library(data.table)
root_dir<-"~/git/RScripts/WestNile/"
submissionDir<-paste0(root_dir,"submission.csv")
source("~/git/RScripts/WestNile/loadWestNileData.R")
# Set necessary parameter
param <- list("objective" = "binary:logistic",
"eval_metric" = "auc",
"eta" = 0.1,
"max_depth"=3,
"nthread" = 2)
nrounds<-140
xg.cv = xgb.cv(param=param, data = x1AsMatrix, label = y1,
nfold = 5, nrounds=nrounds)
xg = xgboost(param=param, data = x1AsMatrix, label = y1, nrounds=nrounds)
model<-getDeepModel(cbind(x1AsMatrix,y1))
h2oPrediction<-as.data.frame(h2o.predict(model,as.h2o(localH2O,x2AsMatrix)))
xgPrediction<-predict(xg,x2AsMatrix);
## check for a reasonable AUC of the model against unseen data (2011)
print(paste("xg auc:",auc(y2,xgPrediction)));
print(paste("h2o auc:",auc(y2,h2oPrediction[,3])));
avgPrediction<-(0.5*h2oPrediction[,3]+0.5*xgPrediction);
print(paste("avg auc:",auc(y2,avgPrediction)))
## now fit a new model to all the data, so that our final submission includes information learned from 2011 as well
xg.cv = xgb.cv(param=param, data = xAsMatrix, label = y,
nfold = 5, nrounds=nrounds)
xg = xgboost(param=param, data = xAsMatrix, label = y, nrounds=nrounds)
model<-getDeepModel(cbind(xAsMatrix,y))
h2oPrediction<-as.data.frame(h2o.predict(model,as.h2o(localH2O,cbind(testAsMatrix))))
xgPrediction<-predict(xg,testAsMatrix);
pSubmit<-(0.5*h2oPrediction[,3]+0.5*xgPrediction);
## look at the predicted distribution (AUC doesn't care about probabilities; just ordering. It's still a good diagnostic)
summary(pSubmit)
submissionFile<-cbind(test$Id,pSubmit)
colnames(submissionFile)<-c("Id","WnvPresent")
options("scipen"=100, "digits"=8)
write.csv(submissionFile,submissionDir,row.names=FALSE,quote=FALSE)
View(submission)
View(`h2oPrediction`)
View(xgPrediction)
View(h2oPrediction)
pSubmit<-(0.5*h2oPrediction[,3]+0.5*xgPrediction);
View(pSubmit)
(0.5*h2oPrediction[1,3]+0.5*xgPrediction[1]);
h2oPrediction[1,3]
xgPrediction[1]
getDeepModel <- function(train){
train.hex <- as.h2o(localH2O,train)
predictors <- 1:(ncol(train.hex)-1)
response <- ncol(train.hex)
model <- h2o.deeplearning(x=predictors,
y=response,
data=train.hex,
classification=T,
activation="RectifierWithDropout",
hidden=c(32,16,8),
hidden_dropout_ratio=c(0.5,0.5,0.5),
input_dropout_ratio=0.05,
epochs=50,
l1=1e-5,
l2=1e-5,
rho=0.99,
epsilon=1e-8,
train_samples_per_iteration=2000,
max_w2=10,
seed=1)
model;
}
model<-getDeepModel(cbind(xAsMatrix,y))
h2oPrediction<-as.data.frame(h2o.predict(model,as.h2o(localH2O,cbind(testAsMatrix))))
xgPrediction<-predict(xg,testAsMatrix);
pSubmit<-(0.5*h2oPrediction[,3]+0.5*xgPrediction);
summary(pSubmit)
submissionFile<-cbind(test$Id,pSubmit)
colnames(submissionFile)<-c("Id","WnvPresent")
options("scipen"=100, "digits"=8)
write.csv(submissionFile,submissionDir,row.names=FALSE,quote=FALSE)
submissionDir
View(pSubmit)
View(cbind(h2oPrediction,xgPrediction,pSubmit))
xg = xgboost(param=param, data = xAsMatrix, label = y, nrounds=nrounds)
model<-getDeepModel(cbind(xAsMatrix,y))
h2oPrediction<-as.data.frame(h2o.predict(model,as.h2o(localH2O,cbind(testAsMatrix))))
xgPrediction<-predict(xg,testAsMatrix);
pSubmit<-(0.5*h2oPrediction[,3]+0.5*xgPrediction);
View(cbind(h2oPrediction[,3],xgPrediction,pSubmit))
getDeepModel <- function(train){
train.hex <- as.h2o(localH2O,train)
predictors <- 1:(ncol(train.hex)-1)
response <- ncol(train.hex)
model <- h2o.deeplearning(x=predictors,
y=response,
data=train.hex,
classification=T,
activation="RectifierWithDropout",
hidden=c(32,16,8),
hidden_dropout_ratio=c(0.5,0.5,0.5),
input_dropout_ratio=0.05,
epochs=50,
l1=1e-5,
l2=1e-5,
rho=0.99,
epsilon=1e-8,
train_samples_per_iteration=2000,
max_w2=10,
seed=1)
model;
}
xg = xgboost(param=param, data = xAsMatrix, label = y, nrounds=nrounds)
model<-getDeepModel(cbind(xAsMatrix,y))
h2oPrediction<-as.data.frame(h2o.predict(model,as.h2o(localH2O,cbind(testAsMatrix))))
xgPrediction<-predict(xg,testAsMatrix);
pSubmit<-(0.5*h2oPrediction[,3]+0.5*xgPrediction);
View(cbind(h2oPrediction[,3],xgPrediction,pSubmit))
summary(pSubmit)
submissionFile<-cbind(test$Id,pSubmit)
colnames(submissionFile)<-c("Id","WnvPresent")
options("scipen"=100, "digits"=8)
write.csv(submissionFile,submissionDir,row.names=FALSE,quote=FALSE)
model<-getDeepModel(cbind(x1AsMatrix,y1))
h2oPrediction<-as.data.frame(h2o.predict(model,as.h2o(localH2O,x2AsMatrix)))
print(paste("h2o auc:",auc(y2,h2oPrediction[,3])));
model<-getDeepModel(cbind(x1AsMatrix,y1))
h2oPrediction<-as.data.frame(h2o.predict(model,as.h2o(localH2O,x2AsMatrix)))
print(paste("h2o auc:",auc(y2,h2oPrediction[,3])));
rm(localH2O)
localH2O <- h2o.init(ip = "localhost", port=54321, nthreads = 1)
h2o.rm(localH2O)
h2o.shutdown(localH2O)
localH2O <- h2o.init(ip = "localhost", port=54321, nthreads = 1)
model<-getDeepModel(cbind(x1AsMatrix,y1))
h2oPrediction<-as.data.frame(h2o.predict(model,as.h2o(localH2O,x2AsMatrix)))
print(paste("h2o auc:",auc(y2,h2oPrediction[,3])));
model<-getDeepModel(cbind(x1AsMatrix,y1))
h2oPrediction<-as.data.frame(h2o.predict(model,as.h2o(localH2O,x2AsMatrix)))
print(paste("h2o auc:",auc(y2,h2oPrediction[,3])));
model<-getDeepModel(cbind(x1AsMatrix,y1))
h2oPrediction<-as.data.frame(h2o.predict(model,as.h2o(localH2O,x2AsMatrix)))
print(paste("h2o auc:",auc(y2,h2oPrediction[,3])));
getDeepModel <- function(train){
train.hex <- as.h2o(localH2O,train)
predictors <- 1:(ncol(train.hex)-1)
response <- ncol(train.hex)
model <- h2o.deeplearning(x=predictors,
y=response,
data=train.hex,
classification=T,
activation="RectifierWithDropout",
hidden=c(32,16,8),
hidden_dropout_ratio=c(0.5,0.5,0.5),
input_dropout_ratio=0.05,
epochs=50,
l1=1e-5,
l2=1e-5,
rho=0.99,
epsilon=1e-8,
train_samples_per_iteration=2000,
max_w2=10,
seed=1,
reproducible=T)
model;
}
model<-getDeepModel(cbind(x1AsMatrix,y1))
h2oPrediction<-as.data.frame(h2o.predict(model,as.h2o(localH2O,x2AsMatrix)))
print(paste("h2o auc:",auc(y2,h2oPrediction[,3])));
model<-getDeepModel(cbind(x1AsMatrix,y1))
h2oPrediction<-as.data.frame(h2o.predict(model,as.h2o(localH2O,x2AsMatrix)))
print(paste("h2o auc:",auc(y2,h2oPrediction[,3])));
getDeepModel <- function(train){
train.hex <- as.h2o(localH2O,train)
predictors <- 1:(ncol(train.hex)-1)
response <- ncol(train.hex)
model <- h2o.deeplearning(x=predictors,
y=response,
data=train.hex,
classification=T,
activation="RectifierWithDropout",
hidden=c(256,128,64),
hidden_dropout_ratio=c(0.5,0.5,0.5),
input_dropout_ratio=0.05,
epochs=50,
l1=1e-5,
l2=1e-5,
rho=0.99,
epsilon=1e-8,
train_samples_per_iteration=2000,
max_w2=10,
seed=1,
reproducible=T)
model;
}
model<-getDeepModel(cbind(x1AsMatrix,y1))
h2oPrediction<-as.data.frame(h2o.predict(model,as.h2o(localH2O,x2AsMatrix)))
print(paste("h2o auc:",auc(y2,h2oPrediction[,3])));
getDeepModel <- function(train){
train.hex <- as.h2o(localH2O,train)
predictors <- 1:(ncol(train.hex)-1)
response <- ncol(train.hex)
model <- h2o.deeplearning(x=predictors,
y=response,
data=train.hex,
classification=T,
activation="RectifierWithDropout",
hidden=c(32,16,8),
hidden_dropout_ratio=c(0.5,0.5,0.5),
input_dropout_ratio=0.05,
epochs=50,
l1=1e-5,
l2=1e-5,
rho=0.99,
epsilon=1e-8,
train_samples_per_iteration=2000,
max_w2=10,
seed=1,
reproducible=T)
model;
}
print(paste("xg auc:",auc(y2,xgPrediction)));
print(paste("h2o auc:",auc(y2,h2oPrediction[,3])));
xg.cv = xgb.cv(param=param, data = x1AsMatrix, label = y1,
nfold = 5, nrounds=nrounds)
xg = xgboost(param=param, data = x1AsMatrix, label = y1, nrounds=nrounds)
model<-getDeepModel(cbind(x1AsMatrix,y1))
h2oPrediction<-as.data.frame(h2o.predict(model,as.h2o(localH2O,x2AsMatrix)))
xgPrediction<-predict(xg,x2AsMatrix);
## check for a reasonable AUC of the model against unseen data (2011)
print(paste("xg auc:",auc(y2,xgPrediction)));
print(paste("h2o auc:",auc(y2,h2oPrediction[,3])));
avgPrediction<-(0.5*h2oPrediction[,3]+0.5*xgPrediction);
print(paste("avg auc:",auc(y2,avgPrediction)))
getDeepModel
## now fit a new model to all the data, so that our final submission includes information learned from 2011 as well
xg.cv = xgb.cv(param=param, data = xAsMatrix, label = y,
nfold = 5, nrounds=nrounds)
xg = xgboost(param=param, data = xAsMatrix, label = y, nrounds=nrounds)
model<-getDeepModel(cbind(xAsMatrix,y))
h2oPrediction<-as.data.frame(h2o.predict(model,as.h2o(localH2O,cbind(testAsMatrix))))
xgPrediction<-predict(xg,testAsMatrix);
pSubmit<-(0.5*h2oPrediction[,3]+0.5*xgPrediction);
View(pSubmit)
View(xgPrediction)
View(cbind(h2oPrediction[,3],xgPrediction,pSubmit))
param <- list("objective" = "binary:logitraw",
"eval_metric" = "auc",
"eta" = 0.1,
"max_depth"=3,
"nthread" = 2)
nrounds<-140
xg.cv = xgb.cv(param=param, data = x1AsMatrix, label = y1,
nfold = 5, nrounds=nrounds)
xg = xgboost(param=param, data = x1AsMatrix, label = y1, nrounds=nrounds)
xgPrediction<-predict(xg,x2AsMatrix);
print(paste("xg auc:",auc(y2,xgPrediction)));
param <- list("objective" = "binary:logistic",
"eval_metric" = "auc",
"eta" = 0.1,
"max_depth"=3,
"nthread" = 2)
nrounds<-140
xg.cv = xgb.cv(param=param, data = x1AsMatrix, label = y1,
nfold = 5, nrounds=nrounds)
param <- list("objective" = "binary:logistic",
"eval_metric" = "auc",
"eta" = 0.01,
"max_depth"=3,
"nthread" = 2)
nrounds<-240
xg.cv = xgb.cv(param=param, data = x1AsMatrix, label = y1,
nfold = 5, nrounds=nrounds)
param <- list("objective" = "binary:logistic",
"eval_metric" = "auc",
"eta" = 0.01,
"max_depth"=3,
"nthread" = 2)
nrounds<-1000
xg.cv = xgb.cv(param=param, data = x1AsMatrix, label = y1,
nfold = 5, nrounds=nrounds)
param <- list("objective" = "binary:logistic",
"eval_metric" = "auc",
"eta" = 0.01,
"max_depth"=3,
"nthread" = 2)
nrounds<-2000
xg.cv = xgb.cv(param=param, data = x1AsMatrix, label = y1,
nfold = 5, nrounds=nrounds)
param <- list("objective" = "binary:logistic",
"eval_metric" = "auc",
"eta" = 0.01,
"max_depth"=3,
"nthread" = 2)
nrounds<-10000
xg.cv = xgb.cv(param=param, data = x1AsMatrix, label = y1,
nfold = 5, nrounds=nrounds)
param <- list("objective" = "binary:logistic",
"eval_metric" = "auc",
"eta" = 0.01,
"max_depth"=6,
"nthread" = 2)
nrounds<-10000
xg.cv = xgb.cv(param=param, data = x1AsMatrix, label = y1,
nfold = 5, nrounds=nrounds)
param <- list("objective" = "binary:logistic",
"eval_metric" = "auc",
"eta" = 0.005,
"max_depth"=6,
"nthread" = 2)
nrounds<-10000
xg.cv = xgb.cv(param=param, data = x1AsMatrix, label = y1,
nfold = 5, nrounds=nrounds)
param <- list("objective" = "binary:logistic",
"eval_metric" = "auc",
"eta" = 0.20,
"max_depth"=6,
"nthread" = 2)
nrounds<-10000
xg.cv = xgb.cv(param=param, data = x1AsMatrix, label = y1,
nfold = 5, nrounds=nrounds)
param <- list("objective" = "binary:logistic",
"eval_metric" = "auc",
"eta" = 0.20,
"max_depth"=3,
"nthread" = 2)
nrounds<-10000
xg.cv = xgb.cv(param=param, data = x1AsMatrix, label = y1,
nfold = 5, nrounds=nrounds)
param <- list("objective" = "binary:logistic",
"eval_metric" = "auc",
"eta" = 0.1,
"max_depth"=3,
"nthread" = 2)
nrounds<-140
xg.cv = xgb.cv(param=param, data = x1AsMatrix, label = y1,
nfold = 5, nrounds=nrounds)
param <- list("objective" = "binary:logistic",
"eval_metric" = "auc",
"eta" = 0.2,
"max_depth"=3,
"nthread" = 2)
nrounds<-140
xg.cv = xgb.cv(param=param, data = x1AsMatrix, label = y1,
nfold = 5, nrounds=nrounds)
param <- list("objective" = "binary:logistic",
"eval_metric" = "auc",
"eta" = 0.25,
"max_depth"=3,
"nthread" = 2)
nrounds<-140
xg.cv = xgb.cv(param=param, data = x1AsMatrix, label = y1,
nfold = 5, nrounds=nrounds)
param <- list("objective" = "binary:logistic",
"eval_metric" = "auc",
"eta" = 0.30,
"max_depth"=3,
"nthread" = 2)
nrounds<-140
xg.cv = xgb.cv(param=param, data = x1AsMatrix, label = y1,
nfold = 5, nrounds=nrounds)
param <- list("objective" = "binary:logistic",
"eval_metric" = "auc",
"eta" = 0.25,
"max_depth"=3,
"nthread" = 2)
nrounds<-140
xg.cv = xgb.cv(param=param, data = x1AsMatrix, label = y1,
nfold = 5, nrounds=nrounds)
param <- list("objective" = "binary:logistic",
"eval_metric" = "auc",
"eta" = 0.25,
"max_depth"=6,
"nthread" = 2)
nrounds<-140
xg.cv = xgb.cv(param=param, data = x1AsMatrix, label = y1,
nfold = 5, nrounds=nrounds)
param <- list("objective" = "binary:logistic",
"eval_metric" = "auc",
"eta" = 0.25,
"max_depth"=4,
"nthread" = 2)
nrounds<-140
xg.cv = xgb.cv(param=param, data = x1AsMatrix, label = y1,
nfold = 5, nrounds=nrounds)
param <- list("objective" = "binary:logistic",
"eval_metric" = "auc",
"eta" = 0.25,
"max_depth"=2,
"nthread" = 2)
nrounds<-140
xg.cv = xgb.cv(param=param, data = x1AsMatrix, label = y1,
nfold = 5, nrounds=nrounds)
param <- list("objective" = "binary:logistic",
"eval_metric" = "auc",
"eta" = 0.25,
"max_depth"=3,
"nthread" = 2)
nrounds<-140
xg.cv = xgb.cv(param=param, data = x1AsMatrix, label = y1,
nfold = 5, nrounds=nrounds)
View(y1)
# Set necessary parameter
param <- list("objective" = "binary:logistic",
"eval_metric" = "auc",
"eta" = 0.25,
"max_depth"=3,
"nthread" = 2)
nrounds<-65
xg.cv = xgb.cv(param=param, data = x1AsMatrix, label = y1,
nfold = 5, nrounds=nrounds)
xg = xgboost(param=param, data = x1AsMatrix, label = y1, nrounds=nrounds)
model<-getDeepModel(cbind(x1AsMatrix,y1))
h2oPrediction<-as.data.frame(h2o.predict(model,as.h2o(localH2O,x2AsMatrix)))
xgPrediction<-predict(xg,x2AsMatrix);
## check for a reasonable AUC of the model against unseen data (2011)
print(paste("xg auc:",auc(y2,xgPrediction)));
print(paste("h2o auc:",auc(y2,h2oPrediction[,3])));
avgPrediction<-(0.5*h2oPrediction[,3]+0.5*xgPrediction);
View(cbind(xgPrediction,h2oPrediction[0,3],y2))
View(cbind(xgPrediction,h2oPrediction[,3],y2))
print(paste("h2o auc:",auc(y2,h2oPrediction[,3]/3)));
avgPrediction<-(0.25*h2oPrediction[,3]+0.75*xgPrediction);
print(paste("avg auc:",auc(y2,avgPrediction)))
avgPrediction<-(0.5*h2oPrediction[,3]+0.5*xgPrediction);
print(paste("avg auc:",auc(y2,avgPrediction)))
model<-getDeepModel(cbind(xAsMatrix,y))
h2oPrediction<-as.data.frame(h2o.predict(model,as.h2o(localH2O,cbind(testAsMatrix))))
model<-getDeepModel(cbind(sqrt(xAsMatrix)+3/8,y))
sqrt(xAsMatrix)
View(sqrt(xAsMatrix))
View(xAsMatrix)
View(test)
