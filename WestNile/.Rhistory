pred2<-makePrediction(first_xg2,test_model1_deep_feat_2)
pred3<-makePrediction(first_xg3,test_model1_deep_feat_3)
pred4<-makePrediction(second_xg1,test_model2_deep_feat_1)
pred5<-makePrediction(second_xg2,test_model2_deep_feat_2)
pred6<-makePrediction(second_xg3,test_model2_deep_feat_3)
pred1<-makePrediction(fold2_first_xg1,fold2_extracted_feat1$test[,-ncol(fold2_extracted_feat1$test)])
pred2<-makePrediction(fold2_first_xg2,fold2_extracted_feat2$test[,-ncol(fold2_extracted_feat2$test)])
pred3<-makePrediction(fold2_first_xg3,fold2_extracted_feat3$test[,-ncol(fold2_extracted_feat3$test)])
pred4<-makePrediction(fold1_second_xg1,fold1_extracted_feat1$test[,-ncol(fold1_extracted_feat1$test)])
pred5<-makePrediction(fold1_second_xg2,fold1_extracted_feat2$test[,-ncol(fold1_extracted_feat2$test)])
pred6<-makePrediction(fold1_second_xg3,fold1_extracted_feat3$test[,-ncol(fold1_extracted_feat3$test)])
preds_fold1<-cbind(pred4,pred5,pred6)
preds_fold2<-cbind(pred1,pred2,pred3)
preds<-rbind(preds_fold1,preds_fold2)
actual_preds<-append(fold1_extracted_feat1$test[,ncol(fold1_extracted_feat1$test)],
fold2_extracted_feat1$test[,ncol(fold2_extracted_feat1$test)])
metaTrainSet <- cbind(preds,actual_preds)
crossValidateXgBoost(metaTrainSet,FALSE,20,6)
metaXG<-GetXGModel(metaTrainSet,FALSE,20,6)
pred1<-makePrediction(first_xg1,test_model1_deep_feat_1)
pred2<-makePrediction(first_xg2,test_model1_deep_feat_2)
pred3<-makePrediction(first_xg3,test_model1_deep_feat_3)
pred4<-makePrediction(second_xg1,test_model2_deep_feat_1)
pred5<-makePrediction(second_xg2,test_model2_deep_feat_2)
pred6<-makePrediction(second_xg3,test_model2_deep_feat_3)
nrow(pred1)
nrow(pred2)
nrow(pred3)
pred1<-makePrediction(first_xg1,test_model1_deep_feat_1)
nrow(test_model1_deep_feat_1)
test_model1_deep_feat_1<-extractFeature(1,model1,test)
library(h2o)
localH2O = h2o.init(nthreads = -1, max_mem_size = "5g")
column_bind<-function(data){
deepfeatures_layer<-cbind(data[,2:ncol(data)],
data[,1]);
deepfeatures_layer;
}
extractFeature<-function(layerNumber,model,train){
train<-train[,-1]
for(i in 1:93){
train[,i] <- as.numeric(train[,i])
train[,i] <- sqrt(train[,i]+(3/8))
}
train.hex <- as.h2o(localH2O,train)
deepfeatures_layer = h2o.deepfeatures(train.hex, model, layer = layerNumber)
deepfeatures_layer<-as.data.frame(deepfeatures_layer);
deepfeatures_layer<-as.matrix(deepfeatures_layer);
deepfeatures_layer<-matrix(as.numeric(deepfeatures_layer),nrow(deepfeatures_layer),ncol(deepfeatures_layer))
deepfeatures_layer;
}
getDeepModel <- function(train){
train<-train[,-1];
for(i in 1:93){
train[,i] <- as.numeric(train[,i])
train[,i] <- sqrt(train[,i]+(3/8))
}
train.hex <- as.h2o(localH2O,train)
predictors <- 1:(ncol(train.hex)-1)
response <- ncol(train.hex)
model <- h2o.deeplearning(x=predictors,
y=response,
data=train.hex,
classification=T,
activation="RectifierWithDropout",
hidden=c(512,256,128),
hidden_dropout_ratio=c(0.5,0.5,0.5),
input_dropout_ratio=0.05,
epochs=50,
l1=1e-5,
l2=1e-5,
rho=0.99,
epsilon=1e-8,
train_samples_per_iteration=2000,
max_w2=10,
seed=1)
model;
}
getPrediction<-function(model,test){
test<-test[,-1];
for(i in 1:93){
test[,i] <- as.numeric(test[,i])
test[,i] <- sqrt(test[,i]+(3/8))
}
test.hex <- as.h2o(localH2O,test[,1:93])
prediction<-as.data.frame(h2o.predict(model,test.hex))[,2:10]
}
test_model1_deep_feat_1<-extractFeature(1,model1,test)
test_model1_deep_feat_2<-extractFeature(2,model1,test)
model1<-getDeepModel(fold1)
model2<-getDeepModel(fold2)
View(metaTrainSet)
####################################################################################
##Extract Features
####################################################################################
model1_deep_feat_1<-extractFeature(1,model1,fold2)
model1_deep_feat_1<-column_bind(model1_deep_feat_1);
model1_deep_feat_2<-extractFeature(2,model1,fold2)
model1_deep_feat_2<-column_bind(model1_deep_feat_2);
model1_deep_feat_3<-extractFeature(3,model1,fold2)
model1_deep_feat_3<-column_bind(model1_deep_feat_3);
model2_deep_feat_1<-extractFeature(1,model2,fold1)
model2_deep_feat_1<-column_bind(model2_deep_feat_1);
model2_deep_feat_2<-extractFeature(2,model2,fold1)
model2_deep_feat_2<-column_bind(model2_deep_feat_2);
model2_deep_feat_3<-extractFeature(3,model2,fold1)
model2_deep_feat_3<-column_bind(model2_deep_feat_3);
####################################################################################
##Classification with Extracted Features
####################################################################################
# crossValidateXgBoost(model1_deep_feat_1,FALSE,40,6)
# crossValidateXgBoost(model1_deep_feat_2,FALSE,40,6)
# crossValidateXgBoost(model1_deep_feat_3,FALSE,40,6)
#
# crossValidateXgBoost(model2_deep_feat_1,FALSE,40,6)
# crossValidateXgBoost(model2_deep_feat_2,FALSE,40,6)
# crossValidateXgBoost(model2_deep_feat_3,FALSE,40,6)
first_xg1<-GetXGModel(model1_deep_feat_1,FALSE,40,6)
first_xg2<-GetXGModel(model1_deep_feat_2,FALSE,40,6)
first_xg3<-GetXGModel(model1_deep_feat_3,FALSE,40,6)
second_xg1<-GetXGModel(model2_deep_feat_1,FALSE,40,6)
second_xg2<-GetXGModel(model2_deep_feat_2,FALSE,40,6)
second_xg3<-GetXGModel(model2_deep_feat_3,FALSE,40,6)
testDir <- paste0(path.expand("~"),otto_dir,'/test.csv')
test<-readCSV(testDir);
test_model1_deep_feat_1<-extractFeature(1,model1,test)
test_model1_deep_feat_2<-extractFeature(2,model1,test)
test_model1_deep_feat_3<-extractFeature(3,model1,test)
test_model2_deep_feat_1<-extractFeature(1,model2,test)
test_model2_deep_feat_2<-extractFeature(2,model2,test)
test_model2_deep_feat_3<-extractFeature(3,model2,test)
save.image("~/Desktop/ottoData.RData")
load("~/Desktop/ottoData.RData")
require(xgboost)
require(methods)
readCSV<-function(dir){
data = read.csv(dir,header=TRUE,stringsAsFactors = F)
x = as.matrix(data)
x = matrix(as.numeric(x),nrow(x),ncol(x))
colnames(x)<-colnames(data);
x;
}
crossValidateXgBoost<-function(train,deleteFirstCol,nrounds,max_depth){
if(deleteFirstCol==T){
train<-train[,-1]
}
y = train[,ncol(train)]
x = train[,-ncol(train)];
# Set necessary parameter
param <- list("objective" = "multi:softprob",
"eval_metric" = "mlogloss",
"eta" = 0.25,
"max_depth"=max_depth,
"num_class" = 9,
"nthread" = 3)
bst.cv = xgb.cv(param=param, data = x, label = y,
nfold = 5, nrounds=nrounds)
}
GetXGModel<- function(train,deleteFirstCol,nrounds,max_depth){
if(deleteFirstCol==T){
train<-train[,-1]
}
y = train[,ncol(train)]
x = train[,-ncol(train)];
# Set necessary parameter
param <- list("objective" = "multi:softprob",
"eval_metric" = "mlogloss",
"eta" = 0.25,
"max_depth"=max_depth,
"num_class" = 9,
"nthread" = 3)
bst = xgboost(param=param, data = x, label = y, nrounds=nrounds)
bst;
}
# Make prediction
makePrediction <- function(xgmodel,data){
pred = predict(xgmodel,data)
pred = matrix(pred,9,length(pred)/9)
pred = t(pred)
pred;
}
library(h2o)
localH2O = h2o.init(nthreads = -1, max_mem_size = "5g")
column_bind<-function(data){
deepfeatures_layer<-cbind(data[,2:ncol(data)],
data[,1]);
deepfeatures_layer;
}
extractFeature<-function(layerNumber,model,train){
train<-train[,-1]
for(i in 1:93){
train[,i] <- as.numeric(train[,i])
train[,i] <- sqrt(train[,i]+(3/8))
}
train.hex <- as.h2o(localH2O,train)
deepfeatures_layer = h2o.deepfeatures(train.hex, model, layer = layerNumber)
deepfeatures_layer<-as.data.frame(deepfeatures_layer);
deepfeatures_layer<-as.matrix(deepfeatures_layer);
deepfeatures_layer<-matrix(as.numeric(deepfeatures_layer),nrow(deepfeatures_layer),ncol(deepfeatures_layer))
deepfeatures_layer;
}
getDeepModel <- function(train){
train<-train[,-1];
for(i in 1:93){
train[,i] <- as.numeric(train[,i])
train[,i] <- sqrt(train[,i]+(3/8))
}
train.hex <- as.h2o(localH2O,train)
predictors <- 1:(ncol(train.hex)-1)
response <- ncol(train.hex)
model <- h2o.deeplearning(x=predictors,
y=response,
data=train.hex,
classification=T,
activation="RectifierWithDropout",
hidden=c(512,256,128),
hidden_dropout_ratio=c(0.5,0.5,0.5),
input_dropout_ratio=0.05,
epochs=50,
l1=1e-5,
l2=1e-5,
rho=0.99,
epsilon=1e-8,
train_samples_per_iteration=2000,
max_w2=10,
seed=1)
model;
}
getPrediction<-function(model,test){
test<-test[,-1];
for(i in 1:93){
test[,i] <- as.numeric(test[,i])
test[,i] <- sqrt(test[,i]+(3/8))
}
test.hex <- as.h2o(localH2O,test[,1:93])
prediction<-as.data.frame(h2o.predict(model,test.hex))[,2:10]
}
test_model2_deep_feat_3<-extractFeature(3,model2,test)
View(model2_deep_feat_3)
getFolds<-function(data,fold){
return(list("train"=data[fold,],"test"=data[-fold,]))
}
getIndexes <- function(data,k){
y_data <- data[,ncol(data)]
folds<-createFolds(y=y_data,k = k,list=TRUE,returnTrain = TRUE)
fold<-folds$Fold01
}
fold2Indexes<-getIndexes(model1_deep_feat_1,10);
fold2_extracted_feat1<-getFolds(model1_deep_feat_1,fold2Indexes)
fold2_extracted_feat2<-getFolds(model1_deep_feat_2,fold2Indexes)
fold2_extracted_feat3<-getFolds(model1_deep_feat_3,fold2Indexes)
fold1Indexes<-getIndexes(model2_deep_feat_1,10);
fold1_extracted_feat1<-getFolds(model2_deep_feat_1,fold1Indexes)
fold1_extracted_feat2<-getFolds(model2_deep_feat_2,fold1Indexes)
fold1_extracted_feat3<-getFolds(model2_deep_feat_3,fold1Indexes)
fold2_xg1<-GetXGModel(fold2_extracted_feat1$train,FALSE,20,6)
require(caret)
getFolds<-function(data,fold){
return(list("train"=data[fold,],"test"=data[-fold,]))
}
getIndexes <- function(data,k){
y_data <- data[,ncol(data)]
folds<-createFolds(y=y_data,k = k,list=TRUE,returnTrain = TRUE)
fold<-folds$Fold01
}
fold2Indexes<-getIndexes(model1_deep_feat_1,10);
fold2_extracted_feat1<-getFolds(model1_deep_feat_1,fold2Indexes)
fold2_extracted_feat2<-getFolds(model1_deep_feat_2,fold2Indexes)
fold2_extracted_feat3<-getFolds(model1_deep_feat_3,fold2Indexes)
fold1Indexes<-getIndexes(model2_deep_feat_1,10);
fold1_extracted_feat1<-getFolds(model2_deep_feat_1,fold1Indexes)
fold1_extracted_feat2<-getFolds(model2_deep_feat_2,fold1Indexes)
fold1_extracted_feat3<-getFolds(model2_deep_feat_3,fold1Indexes)
fold2_xg1<-GetXGModel(fold2_extracted_feat1$train,FALSE,20,6)
fold2_xg2<-GetXGModel(fold2_extracted_feat2$train,FALSE,20,6)
fold2_xg3<-GetXGModel(fold2_extracted_feat3$train,FALSE,20,6)
fold1_xg1<-GetXGModel(fold1_extracted_feat1$train,FALSE,20,6)
fold1_xg2<-GetXGModel(fold1_extracted_feat2$train,FALSE,20,6)
fold1_xg3<-GetXGModel(fold1_extracted_feat3$train,FALSE,20,6)
fold2_pred1<-makePrediction(fold2_first_xg1,fold2_extracted_feat1$test[,-ncol(fold2_extracted_feat1$test)])
fold2_pred2<-makePrediction(fold2_first_xg2,fold2_extracted_feat2$test[,-ncol(fold2_extracted_feat2$test)])
fold2_pred3<-makePrediction(fold2_first_xg3,fold2_extracted_feat3$test[,-ncol(fold2_extracted_feat3$test)])
fold1_pred4<-makePrediction(fold1_second_xg1,fold1_extracted_feat1$test[,-ncol(fold1_extracted_feat1$test)])
fold1_pred5<-makePrediction(fold1_second_xg2,fold1_extracted_feat2$test[,-ncol(fold1_extracted_feat2$test)])
fold1_pred6<-makePrediction(fold1_second_xg3,fold1_extracted_feat3$test[,-ncol(fold1_extracted_feat3$test)])
preds_fold1<-cbind(fold1_pred4,fold1_pred5,fold1_pred6)
preds_fold2<-cbind(fold2_pred1,fold2_pred2,fold2_pred3)
preds_folds<-rbind(preds_fold1,preds_fold2)
actual_preds<-append(fold1_extracted_feat1$test[,ncol(fold1_extracted_feat1$test)],
fold2_extracted_feat1$test[,ncol(fold2_extracted_feat1$test)])
metaTrainSet <- cbind(preds_folds,actual_preds)
crossValidateXgBoost(metaTrainSet,FALSE,20,6)
metaXG<-GetXGModel(metaTrainSet,FALSE,20,6)
writeSubmissionByEnsembling <- function(){
submissionDir <- paste0(path.expand("~"), "/Dropbox/otto/submission.csv")
submission<-getSubmissionFormat(submissionDir);
preds_fold1<-cbind(pred4,pred5,pred6)
preds_fold2<-cbind(pred1,pred2,pred3)
submission[,2:10] <- (preds_fold1+preds_fold2)/2;
write.csv(submission,file=submissionDir,row.names=FALSE)
}
View(metaTrainSet)
View(model1_deep_feat_1)
View(fold1_pred4)
View(metaTrainSet)
View(fold1_extracted_feat1)
View(fold1_extracted_feat1$train)
View(fold1_extracted_feat2$train)
library(h2o)
localH2O = h2o.init(nthreads = -1, max_mem_size = "5g")
column_bind<-function(data){
deepfeatures_layer<-cbind(data[,2:ncol(data)],
data[,1]);
deepfeatures_layer;
}
extractFeature<-function(layerNumber,model,train){
train<-train[,-1]
for(i in 1:93){
train[,i] <- as.numeric(train[,i])
train[,i] <- sqrt(train[,i]+(3/8))
}
train.hex <- as.h2o(localH2O,train)
deepfeatures_layer = h2o.deepfeatures(train.hex, model, layer = layerNumber)
deepfeatures_layer<-as.data.frame(deepfeatures_layer);
deepfeatures_layer<-as.matrix(deepfeatures_layer);
deepfeatures_layer<-matrix(as.numeric(deepfeatures_layer),nrow(deepfeatures_layer),ncol(deepfeatures_layer))
deepfeatures_layer;
}
getDeepModel <- function(train){
train<-train[,-1];
for(i in 1:93){
train[,i] <- as.numeric(train[,i])
train[,i] <- sqrt(train[,i]+(3/8))
}
train.hex <- as.h2o(localH2O,train)
predictors <- 1:(ncol(train.hex)-1)
response <- ncol(train.hex)
model <- h2o.deeplearning(x=predictors,
y=response,
data=train.hex,
classification=T,
activation="RectifierWithDropout",
hidden=c(1024,512,256),
hidden_dropout_ratio=c(0.5,0.5,0.5),
input_dropout_ratio=0.05,
epochs=50,
l1=1e-5,
l2=1e-5,
rho=0.99,
epsilon=1e-8,
train_samples_per_iteration=2000,
max_w2=10,
seed=1)
model;
}
getPrediction<-function(model,test){
test<-test[,-1];
for(i in 1:93){
test[,i] <- as.numeric(test[,i])
test[,i] <- sqrt(test[,i]+(3/8))
}
test.hex <- as.h2o(localH2O,test[,1:93])
prediction<-as.data.frame(h2o.predict(model,test.hex))[,2:10]
}
writeSubmissionByEnsembling();
pred1<-makePrediction(first_xg1,test_model1_deep_feat_1)
pred2<-makePrediction(first_xg2,test_model1_deep_feat_2)
pred3<-makePrediction(first_xg3,test_model1_deep_feat_3)
pred4<-makePrediction(second_xg1,test_model2_deep_feat_1)
pred5<-makePrediction(second_xg2,test_model2_deep_feat_2)
pred6<-makePrediction(second_xg3,test_model2_deep_feat_3)
writeSubmissionByEnsembling();
View(preds_fold1)
View(test)
View(train)
primitiveModel<-GetXGModel(train,TRUE,40,6);
primitiveModel<-GetXGModel(readCSV(trainDir),TRUE,40,6);
View(train)
readCSV<-function(dir){
data = read.csv(dir,header=TRUE,stringsAsFactors = F)
x = as.matrix(data)
x = matrix(as.numeric(x),nrow(x),ncol(x))
x[,ncol(x)] = gsub('Class_','',x[,ncol(x)])
x[,ncol(x)] = as.integer(x[,ncol(x)])-1 #xgboost take features in [0,numOfClass)
colnames(x)<-colnames(data);
x;
}
primitiveModel<-GetXGModel(readCSV(trainDir),TRUE,40,6);
View(readCSV(trainDir))
readCSV<-function(dir){
data = read.csv(dir,header=TRUE,stringsAsFactors = F)
y = data[,ncol(data)]
y = gsub('Class_','',y)
y = as.integer(y)-1 #xgboost take features in [0,numOfClass)
x = as.matrix(data)
x = matrix(as.numeric(x),nrow(x),ncol(x))
x[,ncol(x)] = y;
colnames(x)<-colnames(data);
x;
}
View(readCSV(trainDir))
primitiveModel<-GetXGModel(readCSV(trainDir),TRUE,40,6);
primitivePreds<-makePrediction(primitiveModel,test)
View(primitivePreds)
writeSubmissionByEnsembling <- function(){
submissionDir <- paste0(path.expand("~"), "/Dropbox/otto/submission.csv")
submission<-getSubmissionFormat(submissionDir);
preds_fold1<-cbind(pred4,pred5,pred6)
preds_fold2<-cbind(pred1,pred2,pred3)
data<-(preds_fold1+preds_fold2)/2;
primitiveModel<-GetXGModel(readCSV(trainDir),TRUE,40,6);
primitivePreds<-makePrediction(primitiveModel,test)
submission[,2:10] <- makePrediction(metaXG,data)
submission[,2:10] <-(primitivePreds+submission[,2:10])/2
write.csv(submission,file=submissionDir,row.names=FALSE)
}
writeSubmissionByEnsembling();
writeSubmissionByEnsembling <- function(){
submissionDir <- paste0(path.expand("~"), "/Dropbox/otto/submission.csv")
submission<-getSubmissionFormat(submissionDir);
preds_fold1<-cbind(pred4,pred5,pred6)
preds_fold2<-cbind(pred1,pred2,pred3)
data<-(preds_fold1+preds_fold2)/2;
submission[,2:10] <- makePrediction(metaXG,data)
submission[,2:10] <-(primitivePreds+submission[,2:10])/2
write.csv(submission,file=submissionDir,row.names=FALSE)
}
writeSubmissionByEnsembling();
writeSubmissionByEnsembling <- function(){
submissionDir <- paste0(path.expand("~"), "/Dropbox/otto/submission.csv")
submission<-getSubmissionFormat(submissionDir);
preds_fold1<-cbind(pred4,pred5,pred6)
preds_fold2<-cbind(pred1,pred2,pred3)
data<-(preds_fold1+preds_fold2)/2;
submission[,2:10] <- makePrediction(metaXG,data)
View(submission[,2:10])
submission[,2:10] <-(primitivePreds+submission[,2:10])/2
write.csv(submission,file=submissionDir,row.names=FALSE)
}
writeSubmissionByEnsembling();
writeSubmissionByEnsembling <- function(){
submissionDir <- paste0(path.expand("~"), "/Dropbox/otto/submission.csv")
submission<-getSubmissionFormat(submissionDir);
preds_fold1<-cbind(pred4,pred5,pred6)
preds_fold2<-cbind(pred1,pred2,pred3)
data<-(preds_fold1+preds_fold2)/2;
submission[,2:10] <- makePrediction(metaXG,data)
View(submission[,2:10])
View(primitivePreds)
submission[,2:10] <-(primitivePreds+submission[,2:10])/2
write.csv(submission,file=submissionDir,row.names=FALSE)
}
writeSubmissionByEnsembling();
primitiveModel<-GetXGModel(readCSV(trainDir),TRUE,160,6);
primitiveModel<-GetXGModel(readCSV(trainDir),TRUE,160,12);
primitivePreds<-makePrediction(primitiveModel,test)
View(primitivePreds)
writeSubmissionByEnsembling();
writeSubmissionByEnsembling <- function(){
submissionDir <- paste0(path.expand("~"), "/Dropbox/otto/submission.csv")
submission<-getSubmissionFormat(submissionDir);
preds_fold1<-cbind(pred4,pred5,pred6)
preds_fold2<-cbind(pred1,pred2,pred3)
data<-(preds_fold1+preds_fold2)/2;
View(submission[,2:10])
submission[,2:10] <-(primitivePreds+submission[,2:10])/2
write.csv(submission,file=submissionDir,row.names=FALSE)
}
writeSubmissionByEnsembling();
writeSubmissionByEnsembling <- function(){
submissionDir <- paste0(path.expand("~"), "/Dropbox/otto/submission.csv")
submission <- read.csv(submissionDir)
preds_fold1<-cbind(pred4,pred5,pred6)
preds_fold2<-cbind(pred1,pred2,pred3)
data<-(preds_fold1+preds_fold2)/2;
View(submission[,2:10])
submission[,2:10] <-(primitivePreds+submission[,2:10])/2
write.csv(submission,file=submissionDir,row.names=FALSE)
}
writeSubmissionByEnsembling();
writeSubmissionByAveraging <- function(preds){
submissionDir <- paste0(path.expand("~"), "/Dropbox/otto/submission.csv")
submission<-getSubmissionFormat(submissionDir);
for(pred in preds){
submission[,2:10] <- submission[,2:10] + pred;
}
submission[,2:10] <- submission[,2:10]/length(preds);
write.csv(submission,file=submissionDir,row.names=FALSE)
}
writeSubmissionByEnsembling <- function(){
submissionDir <- paste0(path.expand("~"), "/Dropbox/otto/submission.csv")
submission <- read.csv(submissionDir)
preds_fold1<-cbind(pred4,pred5,pred6)
preds_fold2<-cbind(pred1,pred2,pred3)
data<-(preds_fold1+preds_fold2)/2;
View(submission[,2:10])
submission[,2:10] <-(data+submission[,2:10])/2
write.csv(submission,file=submissionDir,row.names=FALSE)
}
writeSubmissionByEnsembling <- function(){
submissionDir <- paste0(path.expand("~"), "/Dropbox/otto/submission.csv")
submission <- read.csv(submissionDir)
preds_fold1<-cbind(pred4,pred5,pred6)
preds_fold2<-cbind(pred1,pred2,pred3)
data<-(preds_fold1+preds_fold2)/2;
View(submission[,2:10])
View(data)
submission[,2:10] <-(data+submission[,2:10])/2
View(submission[,2:10])
write.csv(submission,file=submissionDir,row.names=FALSE)
}
writeSubmissionByEnsembling();
